// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color; // 其代表了顶点颜色，在游戏中，就是此材质所在节点上的颜色.
  out vec4 v_color; // 定点着色器的 输出.

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  // 此行指定了float数的精度
  // 1.lowp 低精度 2.mediump 中精度 3.highp 高精度。
  // 精度和数据所需要的空间有关，精度越高，需要的空间也就越大。
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

 // 这个可以理解为从顶点着色器中传来的自定义数据
  in vec4 v_color;

 // 其代表了一个预处理宏开关，以 #if ...... 开始，#endif 结束。当条件成立时，才会进入其中的逻辑。
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    // 变量o代表了此坐标上的rgba值。首先会先赋给o一个默认的值vec4(1, 1, 1, 1)。
    // vec4在不同的情况下，可以解释成不同的涵义。如果是坐标，那就代表了x、y、z、w；
    // 如果作为颜色，那就代表了r、g、b、a。vec4(1, 1, 1, 1)，就代表了rgba值均为1，为白色。
    vec4 o = vec4(1, 1, 1, 1);

    // 之后会进入一个预处理宏，如果条件成立的话，会执行：
    // CCTexture的作用就是对纹理上的某一个坐标进行采样，输出采样获得的颜色值。这个方法会在很多时候用到。这个函数在不勾选INPUT_IS_GAMMA和USE_ALPHA_TEST的时候，和glsl中的函数 texture(sampler2D texture, vec2 uv) 的效果一致。不同的是，CCTexture会将颜色值通过第三个参数返回，texture则会作为函数返回值返回。在默认情况下，纹理上的位置和v_uv0的位置是一致的，是“理所应当”的位置。所以，直接通过v_uv0采样，会将纹理原本的样子显示出来。
    // 而如果对采样的位置进行操作，就会将其他位置的图像显示到此位置上来，从而产生一些特殊的效果。比如说将采样的x坐标加上0.2，那么展示的结果，图像会向左边偏移20%。
    // 如果直接对o，即采样出的颜色进行操作，那么也可以做出奇妙的效果。比如，执行 o.a *= 0.5，那么就会使最终的显示变为原本透明度的50%。如果 o.rgb *= 2.0，则颜色会变亮；如果 o.rgb *= 0.5，则颜色就会变暗。
    // 当再次加入坐标这一参数之后，就可以描绘出特定的图案出来，
    // 比如，执行 o.a = v_uv0.x, 就会形成左边透明，右边不透明的过渡效果。通过不同的计算方式，就能够显示出各种有趣的效果。
    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
      // o.a *= 0.5
      o.a = v_uv0.x;
    #endif

    // 这行代码就是将采样得出的颜色，和节点设置的颜色进行了叠加操作。
    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
