{"version":3,"sources":["assets/shaderScene/CaptureTest/CaptureTest.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { encodeJPG } from \"./EncodeJPG\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CaptureTest extends cc.Component {\r\n    @property(cc.Label)\r\n    lb: cc.Label = null\r\n\r\n\r\n    private encodeJpgCapture() {\r\n        this.lb.string = `encodeJpgCapture \\n结果见控制台日志 \\n${Date.now()}`\r\n\r\n        // 此代码仅适用于 web 平台。要在 native 平台中使用这个功能，请参考 example -case 中的 capture_to_native 场景。\r\n        let node = new cc.Node();\r\n        node.zIndex = cc.macro.MAX_ZINDEX;\r\n        node.parent = this.node.parent;\r\n        let camera = node.addComponent(cc.Camera);\r\n        camera.backgroundColor = cc.Color.TRANSPARENT\r\n        camera.clearFlags = cc.Camera.ClearFlags.DEPTH | cc.Camera.ClearFlags.STENCIL | cc.Camera.ClearFlags.COLOR\r\n        // 设置你想要的截图内容的 cullingMask\r\n        camera.cullingMask = 0xffffffff;\r\n\r\n        // 新建一个 RenderTexture，并且设置 camera 的 targetTexture 为新建的 RenderTexture，这样 camera 的内容将会渲染到新建的 RenderTexture 中。\r\n        let texture = new cc.RenderTexture();\r\n        //@ts-ignore\r\n        let gl = cc.game._renderContext;\r\n        // 如果截图内容中不包含 Mask 组件，可以不用传递第三个参数\r\n        texture.initWithSize(this.node.parent.width, this.node.parent.height, gl.STENCIL_INDEX8);\r\n        camera.targetTexture = texture;\r\n\r\n        // 渲染一次摄像机，即更新一次内容到 RenderTexture 中\r\n        camera.render();\r\n        camera.enabled = false;\r\n\r\n        // 这样我们就能从 RenderTexture 中获取到数据了\r\n        let data = texture.readPixels();\r\n        let width = texture.width;\r\n        let height = texture.height;\r\n\r\n        const flipYData = new Uint8Array(width * height * 4);\r\n        let rowBytes = width * 4;\r\n        for (let row = 0; row < height; row++) {\r\n            let startRow = height - 1 - row;\r\n            let start = startRow * width * 4;\r\n            for (let i = 0; i < rowBytes; i++) {\r\n                flipYData[row * width * 4 + i] = data[start + i];\r\n            }\r\n        }\r\n   \r\n\r\n        const rawImageData = {\r\n            data: flipYData,\r\n            width: width,\r\n            height: height,\r\n        };\r\n        const jpegImageData = encodeJPG(rawImageData, 50);\r\n        cc.log('jpegImageData', jpegImageData);\r\n        function uint8ToString(buf) {\r\n            var i, length, out = '';\r\n            for (i = 0, length = buf.length; i < length; i += 1) {\r\n                out += String.fromCharCode(buf[i]);\r\n            }\r\n            return out;\r\n        }\r\n        const base64 = btoa(uint8ToString(jpegImageData.data));//\r\n        cc.warn('base64', \"data:image/jpg;base64,\" + base64)\r\n\r\n        this.scheduleOnce(() => {\r\n            node.destroy()\r\n        }, 0)\r\n    }\r\n\r\n\r\n    private canvasToDataURLCapture() {\r\n        this.lb.string = `canvas toDataURL \\n结果见控制台日志 \\n${Date.now()}`\r\n        // 此代码仅适用于 web 平台。要在 native 平台中使用这个功能，请参考 example-case 中的 capture_to_native 场景。\r\n        let node = new cc.Node();\r\n        node.parent = this.node.parent;\r\n        let camera = node.addComponent(cc.Camera);\r\n        camera.backgroundColor = cc.Color.TRANSPARENT\r\n        camera.clearFlags = cc.Camera.ClearFlags.DEPTH | cc.Camera.ClearFlags.STENCIL | cc.Camera.ClearFlags.COLOR\r\n        // 设置你想要的截图内容的 cullingMask\r\n        camera.cullingMask = 0xffffffff;\r\n\r\n        // 新建一个 RenderTexture，并且设置 camera 的 targetTexture 为新建的 RenderTexture，这样 camera 的内容将会渲染到新建的 RenderTexture 中。\r\n        let texture = new cc.RenderTexture();\r\n        let gl = cc.game._renderContext;\r\n        // 如果截图内容中不包含 Mask 组件，可以不用传递第三个参数\r\n        texture.initWithSize(this.node.parent.width, this.node.parent.height, gl.STENCIL_INDEX8);\r\n        camera.targetTexture = texture;\r\n\r\n        // 渲染一次摄像机，即更新一次内容到 RenderTexture 中\r\n        camera.render();\r\n\r\n        // 这样我们就能从 RenderTexture 中获取到数据了\r\n        let data = texture.readPixels();\r\n\r\n        // 接下来就可以对这些数据进行操作了\r\n        let canvas = document.createElement('canvas');\r\n        let ctx = canvas.getContext('2d');\r\n        let width = canvas.width = texture.width;\r\n        let height = canvas.height = texture.height;\r\n\r\n        canvas.width = texture.width;\r\n        canvas.height = texture.height;\r\n\r\n        let rowBytes = width * 4;\r\n        for (let row = 0; row < height; row++) {\r\n            let startRow = height - 1 - row;\r\n            let imageData = ctx.createImageData(width, 1);\r\n            let start = startRow * width * 4;\r\n            for (let i = 0; i < rowBytes; i++) {\r\n                imageData.data[i] = data[start + i];\r\n            }\r\n            ctx.putImageData(imageData, 0, row);\r\n        }\r\n\r\n        let dataURL = canvas.toDataURL(\"image/jpeg\");\r\n        cc.warn('canvasToDataURLCapture', dataURL)\r\n        // let img = document.createElement(\"img\");\r\n        // img.src = dataURL;\r\n\r\n        this.scheduleOnce(() => {\r\n            node.destroy()\r\n        }, 0)\r\n    }\r\n\r\n\r\n    onLoad (){\r\n        cc.warn(\r\n            `\r\n/*\r\nhttps://mp.weixin.qq.com/s/Ht0kIbaeBEds_wUeUlu8JQ\r\n\r\n*/\r\n\r\n// 欢迎关注微信公众号[白玉无冰]\r\n\r\n/**\r\n█████████████████████████████████████\r\n█████████████████████████████████████\r\n████ ▄▄▄▄▄ █▀█ █▄██▀▄ ▄▄██ ▄▄▄▄▄ ████\r\n████ █   █ █▀▀▀█ ▀▄▀▀▀█▄▀█ █   █ ████\r\n████ █▄▄▄█ █▀ █▀▀▀ ▀▄▄ ▄ █ █▄▄▄█ ████\r\n████▄▄▄▄▄▄▄█▄▀ ▀▄█ ▀▄█▄▀ █▄▄▄▄▄▄▄████\r\n████▄▄  ▄▀▄▄ ▄▀▄▀▀▄▄▄ █ █ ▀ ▀▄█▄▀████\r\n████▀ ▄  █▄█▀█▄█▀█  ▀▄ █ ▀ ▄▄██▀█████\r\n████ ▄▀▄▄▀▄ █▄▄█▄ ▀▄▀ ▀ ▀ ▀▀▀▄ █▀████\r\n████▀ ██ ▀▄ ▄██ ▄█▀▄ ██▀ ▀ █▄█▄▀█████\r\n████   ▄██▄▀ █▀▄▀▄▀▄▄▄▄ ▀█▀ ▀▀ █▀████\r\n████ █▄ █ ▄ █▀ █▀▄█▄▄▄▄▀▄▄█▄▄▄▄▀█████\r\n████▄█▄█▄█▄█▀ ▄█▄   ▀▄██ ▄▄▄ ▀   ████\r\n████ ▄▄▄▄▄ █▄██ ▄█▀  ▄   █▄█  ▄▀█████\r\n████ █   █ █ ▄█▄ ▀  ▀▀██ ▄▄▄▄ ▄▀ ████\r\n████ █▄▄▄█ █ ▄▄▀ ▄█▄█▄█▄ ▀▄   ▄ █████\r\n████▄▄▄▄▄▄▄█▄██▄▄██▄▄▄█████▄▄█▄██████\r\n█████████████████████████████████████\r\n█████████████████████████████████████\r\n    */\r\n            `\r\n        )\r\n    }\r\n}\r\n"]}