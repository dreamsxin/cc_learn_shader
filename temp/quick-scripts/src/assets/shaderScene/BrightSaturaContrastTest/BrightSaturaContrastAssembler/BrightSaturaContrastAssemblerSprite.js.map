{"version":3,"sources":["assets/shaderScene/BrightSaturaContrastTest/BrightSaturaContrastAssembler/BrightSaturaContrastAssemblerSprite.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,iFAA4E;AAEtE,IAAA,KAA2C,EAAE,CAAC,UAAU,EAAtD,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,iBAAiB,uBAAkB,CAAC;AAI/D;IAAiE,uDAAS;IAA1E;QAAA,qEA0DC;QAxDG,iBAAW,GAAW,GAAG,CAAC;QAW1B,iBAAW,GAAW,GAAG,CAAC;QAW1B,gBAAU,GAAW,GAAG,CAAC;;IAkC7B,CAAC;IAtDG,sBAAI,2DAAU;aAId;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aAND,UAAe,CAAC;YACZ,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;;;OAAA;IAQD,sBAAI,2DAAU;aAId;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aAND,UAAe,CAAC;YACZ,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;;;OAAA;IAQD,sBAAI,0DAAS;aAIb;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aAND,UAAc,CAAC;YACX,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;;;OAAA;IAKD,sDAAQ,GAAR;QACI,iBAAM,QAAQ,WAAE,CAAC;QACjB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEM,6DAAe,GAAtB;QACI,YAAY;QACZ,IAAI,SAAS,GAAkC,IAAI,CAAC,UAAU,CAAC;QAC/D,IAAI,CAAC,SAAS;YACV,OAAO;QAEX,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACvC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACrC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACvC,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED,qBAAqB;IACrB,6DAAe,GAAf;QACI,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,uCAA6B,EAAE,CAAC;QACtE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAvDD;QADC,QAAQ;4EACiB;IAE1B;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;yEAIxD;IAMD;QADC,QAAQ;4EACiB;IAE1B;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;yEAIxD;IAMD;QADC,QAAQ;2EACgB;IAEzB;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;wEAIxD;IA7BgB,mCAAmC;QAFvD,OAAO;QACP,iBAAiB;OACG,mCAAmC,CA0DvD;IAAD,0CAAC;CA1DD,AA0DC,CA1DgE,EAAE,CAAC,MAAM,GA0DzE;kBA1DoB,mCAAmC","file":"","sourceRoot":"/","sourcesContent":["\nimport BrightSaturaContrastAssembler from \"./BrightSaturaContrastAssembler\";\n\nconst { ccclass, property, executeInEditMode } = cc._decorator;\n\n@ccclass\n@executeInEditMode\nexport default class BrightSaturaContrastAssemblerSprite extends cc.Sprite {\n    @property\n    _brightness: number = 1.0;\n    @property({ type: cc.Float, range: [0, 3], slide: true })\n    set brightness(v) {\n        this._brightness = v;\n        this.flushProperties();\n    }\n    get brightness() {\n        return this._brightness;\n    }\n\n    @property\n    _saturation: number = 1.0;\n    @property({ type: cc.Float, range: [0, 3], slide: true })\n    set saturation(v) {\n        this._saturation = v;\n        this.flushProperties();\n    }\n    get saturation() {\n        return this._saturation;\n    }\n\n    @property\n    _constrast: number = 1.0;\n    @property({ type: cc.Float, range: [0, 3], slide: true })\n    set constrast(v) {\n        this._constrast = v;\n        this.flushProperties();\n    }\n    get constrast() {\n        return this._constrast;\n    }\n\n    onEnable(){\n        super.onEnable();\n        this.flushProperties();\n    }\n\n    public flushProperties() {\n        //@ts-ignore\n        let assembler: BrightSaturaContrastAssembler = this._assembler;\n        if (!assembler)\n            return;\n\n        assembler.brightness = this.brightness;\n        assembler.constrast = this.constrast;\n        assembler.saturation = this.saturation;\n        this.setVertsDirty();\n    }\n\n    // // 使用cc.Sprite默认逻辑\n    _resetAssembler() {\n        let assembler = this._assembler = new BrightSaturaContrastAssembler();\n        this.flushProperties();\n        assembler.init(this);\n        this._updateColor();\n    }\n}\n"]}