{"version":3,"sources":["assets/demo03/LiquidBox2dTest.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n// author: http://lamyoung.com/\nconst { ccclass, property } = cc._decorator;\n\n// https://mp.weixin.qq.com/s/T-xkgkLonYqA_4yqPIYLSg\nlet particleSystem;\nconst PTM_RATIO = cc.PhysicsManager.PTM_RATIO;\nconst PSD_RADIUS = 2;\n\nconst gfx = cc['gfx'];\n\n@ccclass\nexport default class LiquidBox2dTest extends cc.Component {\n\n\n    @property(cc.MeshRenderer)\n    meshRenderer: cc.MeshRenderer = null;\n\n    @property(cc.SpriteFrame)\n    spriteFrame: cc.SpriteFrame = null;\n\n    onLoad() {\n        const phyMgr = cc.director.getPhysicsManager();\n        phyMgr.enabled = true;\n        phyMgr.debugDrawFlags = 7;\n\n        let spriteFrame = this.spriteFrame;\n        if (spriteFrame) {\n            let newTexture = spriteFrame.getTexture();\n            if (newTexture && newTexture.loaded) {\n                this.onSpriteFrameLoaded();\n            } else {\n                spriteFrame.once('load', this.onSpriteFrameLoaded, this);\n            }\n        }\n    }\n\n\n    onSpriteFrameLoaded() {\n        const texture = this.spriteFrame.getTexture();\n        this.meshRenderer.node.width = texture.width;\n        this.meshRenderer.node.height = texture.height;\n\n\n        const phyMgr = cc.director.getPhysicsManager();\n        const world = phyMgr['_world'];\n        const psd = new b2.ParticleSystemDef();\n        psd.radius = PSD_RADIUS / PTM_RATIO; //每个粒子的半径\n        // psd.dampingStrength = 0.2;//阻尼\n        psd.elasticStrength = 0.5;\n        particleSystem = world.CreateParticleSystem(psd);\n        // particleSystem.SetGravityScale(0.4);//重力比例\n        // particleSystem.SetDensity(1);//粒子的密度\n\n\n        // cc.log('third group');\n        // third group\n        const box = new b2.PolygonShape();\n        const pgd = new b2.ParticleGroupDef();\n        box.SetAsBox(this.meshRenderer.node.width / 2 / PTM_RATIO, this.meshRenderer.node.height / 2 / PTM_RATIO);\n        pgd.flags = b2.ParticleFlag.b2_elasticParticle;\n        pgd.groupFlags = b2.ParticleGroupFlag.b2_solidParticleGroup;\n        const pos = this.meshRenderer.node.convertToWorldSpaceAR(cc.Vec2.ZERO).divSelf(PTM_RATIO);\n        pgd.position.Set(pos.x, pos.y);\n        // pgd.angle = -0.5;\n        pgd.angularVelocity = Math.random() - 0.5;\n        pgd.shape = box;\n        // pgd.color.Set(0, 0, 255, 255);\n        const particleGroup = particleSystem.CreateParticleGroup(pgd);\n\n\n        // cc.log('third pgd', pgd);\n        // cc.log('third particleGroup', particleGroup);\n\n        let particleCount = particleSystem.GetParticleCount();\n        // cc.log('particleCount', particleCount);\n        let posBuff = particleSystem.GetPositionBuffer();\n        // cc.log('posBuff', posBuff);\n        // cc.log('particleSystem', particleSystem);\n\n        const mesh = new cc.Mesh();\n        mesh.init(new gfx.VertexFormat([\n            { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n            { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n        ]), particleCount, true);\n\n        const material = this.meshRenderer.getMaterial(0);\n        const uv = this.spriteFrame.uv;\n        /**\n         *    t\n         * l     r\n         *    b\n         */\n        const uv_l = uv[0];\n        const uv_r = uv[6];\n        const uv_b = uv[3];\n        const uv_t = uv[5];\n\n        material.setProperty('texture', texture);\n        material.setProperty('u_pointSize', PSD_RADIUS * 2);\n\n        const vertexes = [];\n        const ids = [];\n        const uvs = [];\n\n        for (let i = 0; i < particleCount; ++i) {\n            const x = posBuff[i].x * PTM_RATIO;\n            const y = posBuff[i].y * PTM_RATIO;\n            const pt = this.meshRenderer.node.convertToNodeSpaceAR(cc.v2(x, y));\n            vertexes.push(pt);\n\n            const u = this._lerp(uv_l, uv_r, (pt.x + texture.width / 2) / texture.width);\n            const v = this._lerp(uv_b, uv_t, (pt.y + texture.height / 2) / texture.height);\n            uvs.push(cc.v2(u, v));\n\n            const indexOffset = i;\n            ids.push(indexOffset);\n        }\n        mesh.setVertices(gfx.ATTR_POSITION, vertexes);\n        mesh.setVertices(gfx.ATTR_UV0, uvs);\n        mesh.setPrimitiveType(gfx.PT_POINTS, 0);\n        mesh.setIndices(ids);\n\n        this.meshRenderer.mesh = mesh;\n\n\n        cc.log('this.meshRenderer', this.meshRenderer);\n        cc.log('vertexes', vertexes);\n        cc.log('uvs', uvs);\n        cc.log('ids', ids);\n\n    }\n\n    private _lerp(a: number, b: number, w: number) {\n        return a + w * (b - a);\n    }\n\n    lateUpdate() {\n        if (!particleSystem) return;\n        let particleCount = particleSystem.GetParticleCount();\n        let posBuff = particleSystem.GetPositionBuffer();\n\n        const vertexes = [];\n\n        // this.graphics.clear();\n        for (let i = 0; i < particleCount; ++i) {\n            const x = posBuff[i].x * PTM_RATIO;\n            const y = posBuff[i].y * PTM_RATIO;\n            const pt = this.meshRenderer.node.convertToNodeSpaceAR(cc.v2(x, y));\n            vertexes.push(pt);\n            // vertexes.push(cc.v2(x, y));\n            // const p2 = this.graphics.node.parent.convertToNodeSpaceAR(cc.v2(x, y))\n            // this.graphics.circle(p2.x, p2.y, PSD_RADIUS);\n\n        }\n        this.meshRenderer.mesh.setVertices(gfx.ATTR_POSITION, vertexes);\n        this.meshRenderer.markForRender(true);\n        // this.graphics.fill();\n    }\n\n    onDestroy() {\n        cc.log('onDestroy');\n        const phyMgr = cc.director.getPhysicsManager();\n        const world = phyMgr['_world'];\n        world.DestroyParticleSystem(particleSystem);\n        particleSystem = null;\n    }\n}\n\n\n\n\n/*\nhttps://mp.weixin.qq.com/s/Ht0kIbaeBEds_wUeUlu8JQ\n\n*/\n\n// 欢迎关注微信公众号[白玉无冰]\n\n/**\n█████████████████████████████████████\n█████████████████████████████████████\n████ ▄▄▄▄▄ █▀█ █▄██▀▄ ▄▄██ ▄▄▄▄▄ ████\n████ █   █ █▀▀▀█ ▀▄▀▀▀█▄▀█ █   █ ████\n████ █▄▄▄█ █▀ █▀▀▀ ▀▄▄ ▄ █ █▄▄▄█ ████\n████▄▄▄▄▄▄▄█▄▀ ▀▄█ ▀▄█▄▀ █▄▄▄▄▄▄▄████\n████▄▄  ▄▀▄▄ ▄▀▄▀▀▄▄▄ █ █ ▀ ▀▄█▄▀████\n████▀ ▄  █▄█▀█▄█▀█  ▀▄ █ ▀ ▄▄██▀█████\n████ ▄▀▄▄▀▄ █▄▄█▄ ▀▄▀ ▀ ▀ ▀▀▀▄ █▀████\n████▀ ██ ▀▄ ▄██ ▄█▀▄ ██▀ ▀ █▄█▄▀█████\n████   ▄██▄▀ █▀▄▀▄▀▄▄▄▄ ▀█▀ ▀▀ █▀████\n████ █▄ █ ▄ █▀ █▀▄█▄▄▄▄▀▄▄█▄▄▄▄▀█████\n████▄█▄█▄█▄█▀ ▄█▄   ▀▄██ ▄▄▄ ▀   ████\n████ ▄▄▄▄▄ █▄██ ▄█▀  ▄   █▄█  ▄▀█████\n████ █   █ █ ▄█▄ ▀  ▀▀██ ▄▄▄▄ ▄▀ ████\n████ █▄▄▄█ █ ▄▄▀ ▄█▄█▄█▄ ▀▄   ▄ █████\n████▄▄▄▄▄▄▄█▄██▄▄██▄▄▄█████▄▄█▄██████\n█████████████████████████████████████\n█████████████████████████████████████\n */"]}