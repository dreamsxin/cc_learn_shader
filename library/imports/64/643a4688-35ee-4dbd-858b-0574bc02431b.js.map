{"version":3,"sources":["assets/shaderScene/BrightSaturaContrastTest/BrightSaturaContrastAssembler/BrightSaturaContrastAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import GTSimpleSpriteAssembler2D from \"../../common/GTSimpleSpriteAssembler2D\";\n\n// 自定义顶点格式，在vfmtPosUvColor基础上，加入 a_brightness  a_saturation  a_constrast\nlet gfx = cc.gfx;\nconst vfmtCustom = new gfx.VertexFormat([\n    { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n    { name: 'a_brightness', type: gfx.ATTR_TYPE_FLOAT32, num: 1 },\n    { name: 'a_saturation', type: gfx.ATTR_TYPE_FLOAT32, num: 1 },\n    { name: 'a_constrast', type: gfx.ATTR_TYPE_FLOAT32, num: 1 },\n]);\n\n\nexport default class BrightSaturaContrastAssembler extends GTSimpleSpriteAssembler2D {\n    // 根据自定义顶点格式，调整下述常量\n    verticesCount = 4;\n    indicesCount = 6;\n    uvOffset = 2;\n    colorOffset = 4;\n    brightnessOffset = 5;\n    saturationOffset = 6;\n    constrastOffset = 7;\n    floatsPerVert = 8;\n\n\n    brightness = 1;\n    saturation = 1;\n    constrast = 1;\n\n    initData() {\n        let data = this._renderData;\n        // createFlexData支持创建指定格式的renderData\n        data.createFlexData(0, this.verticesCount, this.indicesCount, this.getVfmt());\n\n        // createFlexData不会填充顶点索引信息，手动补充一下\n        let indices = data.iDatas[0];\n        let count = indices.length / 6;\n        for (let i = 0, idx = 0; i < count; i++) {\n            let vertextID = i * 4;\n            indices[idx++] = vertextID;\n            indices[idx++] = vertextID + 1;\n            indices[idx++] = vertextID + 2;\n            indices[idx++] = vertextID + 1;\n            indices[idx++] = vertextID + 3;\n            indices[idx++] = vertextID + 2;\n        }\n    }\n\n    // 自定义格式以getVfmt()方式提供出去，除了当前assembler，render-flow的其他地方也会用到\n    getVfmt() {\n        return vfmtCustom;\n    }\n\n    // 重载getBuffer(), 返回一个能容纳自定义顶点数据的buffer\n    // 默认fillBuffers()方法中会调用到\n    getBuffer() {\n        return cc.renderer._handle.getBuffer(\"mesh\", this.getVfmt());\n    }\n\n\n    updateUVs(sprite) {\n        super.updateUVs(sprite);\n        let dstOffset;\n        let verts = this._renderData.vDatas[0];\n        for (let i = 0; i < this.verticesCount; ++i) {\n            // fill \n            let floatsOffset = this.floatsPerVert * i;\n\n            dstOffset = floatsOffset + this.brightnessOffset;\n            verts[dstOffset] = this.brightness;\n\n            dstOffset = floatsOffset + this.saturationOffset;\n            verts[dstOffset] = this.saturation;\n\n            dstOffset = floatsOffset + this.constrastOffset;\n            verts[dstOffset] = this.constrast;\n\n        }\n\n    }\n}\n"]}