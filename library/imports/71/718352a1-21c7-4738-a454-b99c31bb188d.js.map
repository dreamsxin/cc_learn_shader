{"version":3,"sources":["assets/shaderScene/common/GTSimpleSpriteAssembler2D.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// https://github.com/caogtaa/CCBatchingTricks\n\nimport GTAssembler2D from \"./GTAssembler2D\";\n\nexport default class GTSimpleSpriteAssembler2D extends GTAssembler2D {\n    // 这部分使用SimpleSpriteAssembler的内容\n    updateRenderData(sprite: cc.Sprite) {\n        this.packToDynamicAtlas(sprite, sprite._spriteFrame);\n        super.updateRenderData(sprite);\n    }\n\n    updateUVs(sprite) {\n        let uv = sprite._spriteFrame.uv;\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n        for (let i = 0; i < 4; i++) {\n            let srcOffset = i * 2;\n            let dstOffset = floatsPerVert * i + uvOffset;\n            verts[dstOffset] = uv[srcOffset];\n            verts[dstOffset + 1] = uv[srcOffset + 1];\n        }\n    }\n\n    updateVerts(sprite) {\n        let node = sprite.node,\n            cw = node.width, ch = node.height,\n            appx = node.anchorX * cw, appy = node.anchorY * ch,\n            l, b, r, t;\n        if (sprite.trim) {\n            l = -appx;\n            b = -appy;\n            r = cw - appx;\n            t = ch - appy;\n        }\n        else {\n            let frame = sprite.spriteFrame,\n                ow = frame._originalSize.width, oh = frame._originalSize.height,\n                rw = frame._rect.width, rh = frame._rect.height,\n                offset = frame._offset,\n                scaleX = cw / ow, scaleY = ch / oh;\n            let trimLeft = offset.x + (ow - rw) / 2;\n            let trimRight = offset.x - (ow - rw) / 2;\n            let trimBottom = offset.y + (oh - rh) / 2;\n            let trimTop = offset.y - (oh - rh) / 2;\n            l = trimLeft * scaleX - appx;\n            b = trimBottom * scaleY - appy;\n            r = cw + trimRight * scaleX - appx;\n            t = ch + trimTop * scaleY - appy;\n        }\n\n        let local = this._local;\n        local[0] = l;\n        local[1] = b;\n        local[2] = r;\n        local[3] = t;\n        this.updateWorldVerts(sprite);\n    }\n}\n"]}