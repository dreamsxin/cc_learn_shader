{"version":3,"sources":["assets/shaderScene/common/GTAssembler2D.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// author: https://github.com/caogtaa/CCBatchingTricks   GT\n\n// 自定义渲染\n// https://docs.cocos.com/creator/manual/zh/advanced-topics/custom-render.html \nexport default class GTAssembler2D extends cc.Assembler {\n    // 每个2d渲染单元里的有:\n    // 4个顶点属性数据\n    // 6个顶点索引 -> 三角剖分成2个三角形\n\n    // 每个顶点属性由5个32位数据组成\n    // 顶点属性声明:\n    // var vfmtPosUvColor = new gfx.VertexFormat([\n    //     { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    //     { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n    //     { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },       // 4个uint8\n    // ]);\n    // 顶点属性数据排列，每一格是32位 (float32/uint32)\n    // x|y|u|v|color|x|y|u|v|color|...\n    // 其中uv在一组数据中的偏移是2，color的偏移是4\n    verticesCount = 4;\n    indicesCount = 6;\n    floatsPerVert = 5;\n\n    // vdata offset info\n    uvOffset = 2;\n    colorOffset = 4;\n    \n    protected _renderData: cc.RenderData = null;\n    protected _local: any = null;          // 中间结果。[l,b,r,t]。node对象左下、右上顶点的本地坐标，即相对于锚点的偏移\n\n    init(comp: cc.RenderComponent) {\n        super.init(comp);\n\n        // cc.Assembler2D的初始化放在constructor里\n        // 此处把初始化放在init里，以便成员变量能够有机会修改\n        this._renderData = new cc.RenderData();\n        this._renderData.init(this);\n\n        this.initLocal();\n        this.initData();\n    }\n\n    get verticesFloats() {\n        return this.verticesCount * this.floatsPerVert;\n    }\n\n    initData() {\n        let data = this._renderData;\n        data.createQuadData(0, this.verticesFloats, this.indicesCount);\n        // createQuadData内部会调用initQuadIndices初始化索引信息\n        // 如果是用用flexbuffer创建则需要自己初始化\n    }\n\n    initLocal() {\n        this._local = [];\n        this._local.length = 4;\n    }\n\n    updateColor(comp, color) {\n        // render data = verts = x|y|u|v|color|x|y|u|v|color|...\n        // 填充render data中4个顶点的color部分\n        let uintVerts = this._renderData.uintVDatas[0];\n        if (!uintVerts) return;\n        color = color != null ? color : comp.node.color._val;\n        let floatsPerVert = this.floatsPerVert;\n        let colorOffset = this.colorOffset;\n        for (let i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) {\n            uintVerts[i] = color;\n        }\n    }\n\n    getBuffer() {\n        //@ts-ignore\n        return cc.renderer._handle._meshBuffer;\n    }\n\n    updateWorldVerts(comp) {\n        if (CC_NATIVERENDERER) {\n            this.updateWorldVertsNative(comp);\n        } else {\n            this.updateWorldVertsWebGL(comp);\n        }\n    }\n\n    updateWorldVertsWebGL(comp) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n\n        let matrix = comp.node._worldMatrix;\n        let matrixm = matrix.m,\n            a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5],\n            tx = matrixm[12], ty = matrixm[13];\n\n        let vl = local[0], vr = local[2],\n            vb = local[1], vt = local[3];\n        \n        /*\n        m00 = 1, m01 = 0, m02 = 0, m03 = 0,\n        m04 = 0, m05 = 1, m06 = 0, m07 = 0,\n        m08 = 0, m09 = 0, m10 = 1, m11 = 0,\n        m12 = 0, m13 = 0, m14 = 0, m15 = 1\n        */\n        // [a,b,c,d] = _worldMatrix[1,2,4,5] == [1,0,0,1]\n        // _worldMatrix[12,13]是xy的平移量\n        // 即世界矩阵的左上角2x2是单元矩阵，说明在2D场景内没有出现旋转或者缩放\n        let justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\n\n        // render data = verts = x|y|u|v|color|x|y|u|v|color|...\n        // 填充render data中4个顶点的xy部分\n        let index = 0;\n        let floatsPerVert = this.floatsPerVert;\n        if (justTranslate) {\n            // left bottom\n            verts[index] = vl + tx;\n            verts[index+1] = vb + ty;\n            index += floatsPerVert;\n            // right bottom\n            verts[index] = vr + tx;\n            verts[index+1] = vb + ty;\n            index += floatsPerVert;\n            // left top\n            verts[index] = vl + tx;\n            verts[index+1] = vt + ty;\n            index += floatsPerVert;\n            // right top\n            verts[index] = vr + tx;\n            verts[index+1] = vt + ty;\n        } else {\n            // 4对xy分别乘以 [2,2]仿射矩阵，然后+平移量\n            let al = a * vl, ar = a * vr,\n            bl = b * vl, br = b * vr,\n            cb = c * vb, ct = c * vt,\n            db = d * vb, dt = d * vt;\n\n            // left bottom\n            // newx = vl * a + vb * c + tx\n            // newy = vl * b + vb * d + ty\n            verts[index] = al + cb + tx;\n            verts[index+1] = bl + db + ty;\n            index += floatsPerVert;\n            // right bottom\n            verts[index] = ar + cb + tx;\n            verts[index+1] = br + db + ty;\n            index += floatsPerVert;\n            // left top\n            verts[index] = al + ct + tx;\n            verts[index+1] = bl + dt + ty;\n            index += floatsPerVert;\n            // right top\n            verts[index] = ar + ct + tx;\n            verts[index+1] = br + dt + ty;\n        }\n    }\n\n    // native场景下使用的updateWorldVerts\n    // copy from \\jsb-adapter-master\\engine\\assemblers\\assembler-2d.js\n    updateWorldVertsNative(comp) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n        let floatsPerVert = this.floatsPerVert;\n      \n        let vl = local[0],\n            vr = local[2],\n            vb = local[1],\n            vt = local[3];\n      \n        let index: number = 0;\n        // left bottom\n        verts[index] = vl;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // right bottom\n        verts[index] = vr;\n        verts[index+1] = vb;\n        index += floatsPerVert;\n        // left top\n        verts[index] = vl;\n        verts[index+1] = vt;\n        index += floatsPerVert;\n        // right top\n        verts[index] = vr;\n        verts[index+1] = vt;\n    }\n\n    // 将准备好的顶点数据填充进 VertexBuffer 和 IndiceBuffer\n    fillBuffers(comp, renderer) {\n        if (renderer.worldMatDirty) {\n            this.updateWorldVerts(comp);\n        }\n\n        let renderData = this._renderData;\n        let vData = renderData.vDatas[0];\n        let iData = renderData.iDatas[0];\n\n        let buffer = this.getBuffer(/*renderer*/);\n        let offsetInfo = buffer.request(this.verticesCount, this.indicesCount);\n\n        // buffer data may be realloc, need get reference after request.\n\n        // fill vertices\n        let vertexOffset = offsetInfo.byteOffset >> 2,\n            vbuf = buffer._vData;\n\n        if (vData.length + vertexOffset > vbuf.length) {\n            vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset);\n        } else {\n            vbuf.set(vData, vertexOffset);\n        }\n\n        // fill indices\n        let ibuf = buffer._iData,\n            indiceOffset = offsetInfo.indiceOffset,\n            vertexId = offsetInfo.vertexOffset;             // vertexId是已经在buffer里的顶点数，也是当前顶点序号的基数\n        for (let i = 0, l = iData.length; i < l; i++) {\n            ibuf[indiceOffset++] = vertexId + iData[i];\n        }\n    }\n\n    packToDynamicAtlas(comp, frame) {\n        if (CC_TEST) return;\n        \n        if (!frame._original && cc.dynamicAtlasManager && frame._texture.packable) {\n            let packedFrame = cc.dynamicAtlasManager.insertSpriteFrame(frame);\n            //@ts-ignore\n            if (packedFrame) {\n                frame._setDynamicAtlasFrame(packedFrame);\n            }\n        }\n        let material = comp._materials[0];\n        if (!material) return;\n        \n        if (material.getProperty('texture') !== frame._texture) {\n            // texture was packed to dynamic atlas, should update uvs\n            comp._vertsDirty = true;\n            comp._updateMaterial();\n        }\n    }\n\n    protected updateUVs(comp: cc.RenderComponent) {\n        // 4个顶点的uv坐标，对应左下、右下、左上、右上\n        // 如果是cc.Sprite组件，这里取sprite._spriteFrame.uv;\n        let uv = [0, 0, 1, 0, 0, 1, 1, 1];\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n\n        // render data = verts = x|y|u|v|color|x|y|u|v|color|...\n        // 填充render data中4个顶点的uv部分\n        for (let i = 0; i < 4; i++) {\n            let srcOffset = i * 2;\n            let dstOffset = floatsPerVert * i + uvOffset;\n            verts[dstOffset] = uv[srcOffset];\n            verts[dstOffset + 1] = uv[srcOffset + 1];\n        }\n    }\n\n    protected updateVerts(comp: cc.RenderComponent) {\n        let node: cc.Node = comp.node,\n            cw: number = node.width,\n            ch: number = node.height,\n            appx: number = node.anchorX * cw,\n            appy: number = node.anchorY * ch,\n            l: number,\n            b: number, \n            r: number,\n            t: number;\n\n        l = - appx;\n        b = - appy;\n        r = cw - appx;\n        t = ch - appy;\n\n        let local = this._local;\n        local[0] = l;\n        local[1] = b;\n        local[2] = r;\n        local[3] = t;\n        this.updateWorldVerts(comp);\n    }\n\n    protected updateRenderData(comp: cc.RenderComponent) {\n        if (comp._vertsDirty) {\n            this.updateUVs(comp);\n            this.updateVerts(comp);\n            comp._vertsDirty = false;\n        }\n    }\n}\n\n// more info:  https://mp.weixin.qq.com/s/YaPHcTN1lkgo5eiYoG3p9A"]}